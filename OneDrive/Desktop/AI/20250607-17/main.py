import os
import asyncio
from typing import Optional
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from openai import OpenAI
from dotenv import load_dotenv
from logger_config import setup_logger, log_user_interaction, log_api_call

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = setup_logger("telegram_bot")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not TELEGRAM_TOKEN:
    logger.error("TELEGRAM_TOKEN not found in environment variables")
    exit(1)

if not OPENAI_API_KEY:
    logger.error("OPENAI_API_KEY not found in environment variables")
    exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞
openai_client = OpenAI(api_key=OPENAI_API_KEY)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    logger.info(f"Bot started by user {user.id} (@{user.username})")
    
    log_user_interaction(logger, user.id, user.username, "start command")
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    location_button = KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)
    keyboard = ReplyKeyboardMarkup([[location_button]], resize_keyboard=True, one_time_keyboard=True)
    
    welcome_message = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
        "üåç –Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–∑–Ω–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ –º–µ—Å—Ç–∞—Ö —Ä—è–¥–æ–º —Å –≤–∞–º–∏!\n\n"
        "üìç –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, "
        "–∏ —è —Ä–∞—Å—Å–∫–∞–∂—É —á—Ç–æ-—Ç–æ –Ω–µ–æ–±—ã—á–Ω–æ–µ –æ –±–ª–∏–∂–∞–π—à–µ–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–º –º–µ—Å—Ç–µ."
    )
    
    await update.message.reply_text(welcome_message, reply_markup=keyboard)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    user = update.effective_user
    log_user_interaction(logger, user.id, user.username, "help command")
    
    help_message = (
        "üÜò *–ü–æ–º–æ—â—å*\n\n"
        "üìç –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç —É–∑–Ω–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ –º–µ—Å—Ç–∞—Ö —Ä—è–¥–æ–º —Å –≤–∞–º–∏.\n\n"
        "*–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*\n"
        "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start\n"
        "2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é'\n"
        "3. –ü–æ–ª—É—á–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –æ –±–ª–∏–∂–∞–π—à–µ–º –º–µ—Å—Ç–µ!\n\n"
        "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    )
    
    await update.message.reply_text(help_message, parse_mode='Markdown')

async def get_place_fact(latitude: float, longitude: float) -> Optional[str]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ —Ñ–∞–∫—Ç–∞ –æ –º–µ—Å—Ç–µ —á–µ—Ä–µ–∑ OpenAI API
    
    Args:
        latitude: –®–∏—Ä–æ—Ç–∞
        longitude: –î–æ–ª–≥–æ—Ç–∞
    
    Returns:
        –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –æ –º–µ—Å—Ç–µ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    try:
        prompt = f"""
        –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {latitude}, {longitude}

        –ù–∞–π–¥–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –∏ –Ω–µ–æ–±—ã—á–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–µ –¥–∞–ª–µ–µ, —á–µ–º –≤ 3 –∫–º –æ—Ç —ç—Ç–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç. 
        –†–∞—Å—Å–∫–∞–∂–∏ –æ–¥–∏–Ω —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—Ç, –ª–µ–≥–µ–Ω–¥—É –∏–ª–∏ –ª—é–±–æ–ø—ã—Ç–Ω—É—é –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å –æ–± —ç—Ç–æ–º –º–µ—Å—Ç–µ.
        
        –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ—Ç–≤–µ—Ç—É:
        - –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
        - –î–ª–∏–Ω–∞ 2-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è  
        - –ù–∞—á–Ω–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—Ç–∞
        - –°–¥–µ–ª–∞–π —Ä–∞—Å—Å–∫–∞–∑ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º –∏ –ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω—ã–º
        - –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–µ—Ç, —Ä–∞—Å—Å–∫–∞–∂–∏ –æ –±–ª–∏–∂–∞–π—à–µ–º –≥–æ—Ä–æ–¥–µ –∏–ª–∏ —Ä–µ–≥–∏–æ–Ω–µ
        
        –ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞:
        "üèõÔ∏è –ú–æ—Å–∫–æ–≤—Å–∫–∏–π –ö—Ä–µ–º–ª—å: –ó–Ω–∞–µ—Ç–µ –ª–∏ –≤—ã, —á—Ç–æ..."
        """
        
        response = openai_client.chat.completions.create(
            model="gpt-4.1-mini",
            messages=[
                {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –∏ –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ –º–µ—Å—Ç–∞—Ö."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=300,
            temperature=0.7
        )
        
        fact = response.choices[0].message.content.strip()
        log_api_call(logger, "OpenAI", True, f"Generated fact for coordinates {latitude}, {longitude}")
        return fact
        
    except Exception as e:
        logger.error(f"Error getting place fact: {str(e)}")
        log_api_call(logger, "OpenAI", False, f"Error: {str(e)}")
        return None

async def handle_location(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
    user = update.effective_user
    location = update.message.location
    
    latitude = location.latitude
    longitude = location.longitude
    
    log_user_interaction(logger, user.id, user.username, f"shared location: {latitude}, {longitude}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∏—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    processing_message = await update.message.reply_text(
        "üîç –ò—â—É –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞ —Ä—è–¥–æ–º —Å –≤–∞–º–∏...", 
        reply_markup=None
    )
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–∫—Ç –æ –º–µ—Å—Ç–µ
        fact = await get_place_fact(latitude, longitude)
        
        if fact:
            await processing_message.edit_text(f"‚ú® {fact}")
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–æ–≤–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
            location_button = KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)
            keyboard = ReplyKeyboardMarkup([[location_button]], resize_keyboard=True, one_time_keyboard=True)
            
            await update.message.reply_text(
                "–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –æ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ? –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é! üó∫Ô∏è",
                reply_markup=keyboard
            )
        else:
            await processing_message.edit_text(
                "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–∞—Ö —Ä—è–¥–æ–º —Å –≤–∞–º–∏. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ."
            )
            
    except Exception as e:
        logger.error(f"Error processing location: {str(e)}")
        await processing_message.edit_text(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ."
        )

async def handle_unknown_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user = update.effective_user
    log_user_interaction(logger, user.id, user.username, "sent unknown message")
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    location_button = KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)
    keyboard = ReplyKeyboardMarkup([[location_button]], resize_keyboard=True, one_time_keyboard=True)
    
    await update.message.reply_text(
        "ü§î –Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é!\n\n"
        "üìç –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, "
        "–∏ —è —Ä–∞—Å—Å–∫–∞–∂—É –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –æ –±–ª–∏–∂–∞–π—à–µ–º –º–µ—Å—Ç–µ.",
        reply_markup=keyboard
    )

def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("Starting Telegram bot...")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    application.add_handler(MessageHandler(filters.LOCATION, handle_location))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_unknown_message))
    
    logger.info("Bot handlers registered successfully")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("Bot is starting polling...")
    application.run_polling()

if __name__ == "__main__":
    main() 