import os
import asyncio
from typing import Dict, Any
from dotenv import load_dotenv
from openai import OpenAI
from logger_config import setup_logger

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = setup_logger("bot_test")

class BotTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞"""
    
    def __init__(self):
        self.openai_api_key = os.getenv("OPENAI_API_KEY")
        self.telegram_token = os.getenv("TELEGRAM_TOKEN")
        
        if self.openai_api_key:
            self.openai_client = OpenAI(api_key=self.openai_api_key)
        else:
            self.openai_client = None
    
    def test_environment_variables(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ª–∏—á–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        logger.info("Testing environment variables...")
        
        results = {
            "telegram_token": bool(self.telegram_token),
            "openai_api_key": bool(self.openai_api_key)
        }
        
        if results["telegram_token"]:
            logger.info("‚úÖ TELEGRAM_TOKEN found")
        else:
            logger.error("‚ùå TELEGRAM_TOKEN missing")
        
        if results["openai_api_key"]:
            logger.info("‚úÖ OPENAI_API_KEY found")
        else:
            logger.error("‚ùå OPENAI_API_KEY missing")
        
        return results
    
    async def test_openai_api(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OpenAI API"""
        logger.info("Testing OpenAI API...")
        
        if not self.openai_client:
            logger.error("‚ùå OpenAI client not initialized")
            return {"success": False, "error": "OpenAI client not initialized"}
        
        try:
            # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –ú–æ—Å–∫–≤—ã
            test_latitude = 55.7558
            test_longitude = 37.6176
            
            prompt = f"""
            –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {test_latitude}, {test_longitude}

            –ù–∞–π–¥–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –∏ –Ω–µ–æ–±—ã—á–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–µ –¥–∞–ª–µ–µ, —á–µ–º –≤ 3 –∫–º –æ—Ç —ç—Ç–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç.
            –†–∞—Å—Å–∫–∞–∂–∏ –æ–¥–∏–Ω —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—Ç, –ª–µ–≥–µ–Ω–¥—É –∏–ª–∏ –ª—é–±–æ–ø—ã—Ç–Ω—É—é –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å –æ–± —ç—Ç–æ–º –º–µ—Å—Ç–µ.
            
            –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ—Ç–≤–µ—Ç—É:
            - –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
            - –î–ª–∏–Ω–∞ 2-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è  
            - –ù–∞—á–Ω–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—Ç–∞
            - –°–¥–µ–ª–∞–π —Ä–∞—Å—Å–∫–∞–∑ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º –∏ –ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω—ã–º
            
            –ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞:
            "üèõÔ∏è –ú–æ—Å–∫–æ–≤—Å–∫–∏–π –ö—Ä–µ–º–ª—å: –ó–Ω–∞–µ—Ç–µ –ª–∏ –≤—ã, —á—Ç–æ..."
            """
            
            response = self.openai_client.chat.completions.create(
                model="gpt-4.1-mini",
                messages=[
                    {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –∏ –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ –º–µ—Å—Ç–∞—Ö."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=300,
                temperature=0.7
            )
            
            fact = response.choices[0].message.content.strip()
            logger.info(f"‚úÖ OpenAI API test successful")
            logger.info(f"Generated fact: {fact[:100]}...")
            
            return {
                "success": True,
                "fact": fact,
                "tokens_used": response.usage.total_tokens if response.usage else 0
            }
            
        except Exception as e:
            logger.error(f"‚ùå OpenAI API test failed: {str(e)}")
            return {"success": False, "error": str(e)}
    
    def test_imports(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤"""
        logger.info("Testing imports...")
        
        results = {}
        
        try:
            import telegram
            results["telegram"] = True
            logger.info("‚úÖ python-telegram-bot imported successfully")
        except ImportError as e:
            results["telegram"] = False
            logger.error(f"‚ùå Failed to import telegram: {e}")
        
        try:
            import openai
            results["openai"] = True
            logger.info("‚úÖ openai imported successfully")
        except ImportError as e:
            results["openai"] = False
            logger.error(f"‚ùå Failed to import openai: {e}")
        
        try:
            from dotenv import load_dotenv
            results["dotenv"] = True
            logger.info("‚úÖ python-dotenv imported successfully")
        except ImportError as e:
            results["dotenv"] = False
            logger.error(f"‚ùå Failed to import dotenv: {e}")
        
        return results
    
    async def run_all_tests(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        logger.info("Starting comprehensive bot testing...")
        
        results = {
            "imports": self.test_imports(),
            "environment": self.test_environment_variables(),
            "openai_api": await self.test_openai_api()
        }
        
        # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        total_tests = 0
        passed_tests = 0
        
        # –ü–æ–¥—Å—á–µ—Ç –∏–º–ø–æ—Ä—Ç–æ–≤
        for test_name, result in results["imports"].items():
            total_tests += 1
            if result:
                passed_tests += 1
        
        # –ü–æ–¥—Å—á–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        for test_name, result in results["environment"].items():
            total_tests += 1
            if result:
                passed_tests += 1
        
        # –ü–æ–¥—Å—á–µ—Ç API —Ç–µ—Å—Ç–æ–≤
        total_tests += 1
        if results["openai_api"]["success"]:
            passed_tests += 1
        
        results["summary"] = {
            "total_tests": total_tests,
            "passed_tests": passed_tests,
            "success_rate": (passed_tests / total_tests) * 100
        }
        
        logger.info(f"Testing completed: {passed_tests}/{total_tests} tests passed ({results['summary']['success_rate']:.1f}%)")
        
        return results

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    tester = BotTester()
    results = await tester.run_all_tests()
    
    print("\n" + "="*50)
    print("BOT TESTING RESULTS")
    print("="*50)
    
    print(f"\nIMPORTS:")
    for lib, status in results["imports"].items():
        status_icon = "‚úÖ" if status else "‚ùå"
        print(f"  {status_icon} {lib}")
    
    print(f"\nENVIRONMENT VARIABLES:")
    for var, status in results["environment"].items():
        status_icon = "‚úÖ" if status else "‚ùå"
        print(f"  {status_icon} {var}")
    
    print(f"\nAPI TESTS:")
    openai_status = "‚úÖ" if results["openai_api"]["success"] else "‚ùå"
    print(f"  {openai_status} OpenAI API")
    
    if results["openai_api"]["success"]:
        print(f"    Generated fact: {results['openai_api']['fact'][:100]}...")
        print(f"    Tokens used: {results['openai_api'].get('tokens_used', 'N/A')}")
    else:
        print(f"    Error: {results['openai_api'].get('error', 'Unknown error')}")
    
    print(f"\nSUMMARY:")
    summary = results["summary"]
    print(f"  Tests passed: {summary['passed_tests']}/{summary['total_tests']}")
    print(f"  Success rate: {summary['success_rate']:.1f}%")
    
    if summary['success_rate'] == 100:
        print("\nüéâ All tests passed! Bot is ready for deployment.")
    else:
        print(f"\n‚ö†Ô∏è  Some tests failed. Please check the configuration.")

if __name__ == "__main__":
    asyncio.run(main()) 